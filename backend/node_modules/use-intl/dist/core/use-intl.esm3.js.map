{"version":3,"file":"use-intl.esm3.js","sources":["../../src/core/createFormatter.tsx"],"sourcesContent":["import DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport NumberFormatOptions from './NumberFormatOptions';\nimport {defaultOnError} from './defaults';\n\nconst MINUTE = 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst YEAR = DAY * 365;\n\nfunction getRelativeTimeFormatConfig(seconds: number) {\n  const absValue = Math.abs(seconds);\n  let value, unit: Intl.RelativeTimeFormatUnit;\n\n  // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n  // will include fractions like '2.1 hours ago'.\n\n  if (absValue < MINUTE) {\n    unit = 'second';\n    value = Math.round(seconds);\n  } else if (absValue < HOUR) {\n    unit = 'minute';\n    value = Math.round(seconds / MINUTE);\n  } else if (absValue < DAY) {\n    unit = 'hour';\n    value = Math.round(seconds / HOUR);\n  } else if (absValue < WEEK) {\n    unit = 'day';\n    value = Math.round(seconds / DAY);\n  } else if (absValue < MONTH) {\n    unit = 'week';\n    value = Math.round(seconds / WEEK);\n  } else if (absValue < YEAR) {\n    unit = 'month';\n    value = Math.round(seconds / MONTH);\n  } else {\n    unit = 'year';\n    value = Math.round(seconds / YEAR);\n  }\n\n  return {value, unit};\n}\n\ntype Props = {\n  locale: string;\n  timeZone?: string;\n  onError?(error: IntlError): void;\n  formats?: Partial<Formats>;\n  now?: Date;\n};\n\nexport default function createFormatter({\n  formats,\n  locale,\n  now: globalNow,\n  onError = defaultOnError,\n  timeZone\n}: Props) {\n  function resolveFormatOrOptions<Options>(\n    typeFormats: Record<string, Options> | undefined,\n    formatOrOptions?: string | Options\n  ) {\n    let options;\n    if (typeof formatOrOptions === 'string') {\n      const formatName = formatOrOptions;\n      options = typeFormats?.[formatName];\n\n      if (!options) {\n        const error = new IntlError(\n          IntlErrorCode.MISSING_FORMAT,\n          process.env.NODE_ENV !== 'production'\n            ? `Format \\`${formatName}\\` is not available. You can configure it on the provider or provide custom options.`\n            : undefined\n        );\n        onError(error);\n        throw error;\n      }\n    } else {\n      options = formatOrOptions;\n    }\n\n    return options;\n  }\n\n  function getFormattedValue<Value, Options>(\n    value: Value,\n    formatOrOptions: string | Options | undefined,\n    typeFormats: Record<string, Options> | undefined,\n    formatter: (options?: Options) => string\n  ) {\n    let options;\n    try {\n      options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n    } catch (error) {\n      return String(value);\n    }\n\n    try {\n      return formatter(options);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(value);\n    }\n  }\n\n  function dateTime(\n    /** If a number is supplied, this is interpreted as a UTC timestamp. */\n    value: Date | number,\n    /** If a time zone is supplied, the `value` is converted to that time zone.\n     * Otherwise the user time zone will be used. */\n    formatOrOptions?: string | DateTimeFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.dateTime,\n      (options) => {\n        if (timeZone && !options?.timeZone) {\n          options = {...options, timeZone};\n        }\n\n        return new Intl.DateTimeFormat(locale, options).format(value);\n      }\n    );\n  }\n\n  function number(\n    value: number | bigint,\n    formatOrOptions?: string | NumberFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.number,\n      (options) => new Intl.NumberFormat(locale, options).format(value)\n    );\n  }\n\n  function relativeTime(\n    /** The date time that needs to be formatted. */\n    date: number | Date,\n    /** The reference point in time to which `date` will be formatted in relation to.  */\n    now?: number | Date\n  ) {\n    try {\n      if (!now) {\n        if (globalNow) {\n          now = globalNow;\n        } else {\n          throw new Error(\n            process.env.NODE_ENV !== 'production'\n              ? `The \\`now\\` parameter wasn't provided and there was no global fallback configured on the provider.`\n              : undefined\n          );\n        }\n      }\n\n      const dateDate = date instanceof Date ? date : new Date(date);\n      const nowDate = now instanceof Date ? now : new Date(now);\n\n      const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n      const {unit, value} = getRelativeTimeFormatConfig(seconds);\n\n      return new Intl.RelativeTimeFormat(locale, {\n        numeric: 'auto'\n      }).format(value, unit);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(date);\n    }\n  }\n\n  return {dateTime, number, relativeTime};\n}\n"],"names":["MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","getRelativeTimeFormatConfig","seconds","absValue","Math","abs","value","unit","round","createFormatter","formats","locale","globalNow","now","onError","defaultOnError","timeZone","resolveFormatOrOptions","typeFormats","formatOrOptions","options","formatName","error","IntlError","IntlErrorCode","MISSING_FORMAT","process","env","NODE_ENV","undefined","getFormattedValue","formatter","String","FORMATTING_ERROR","message","dateTime","Intl","DateTimeFormat","format","number","NumberFormat","relativeTime","date","Error","dateDate","Date","nowDate","getTime","RelativeTimeFormat","numeric"],"mappings":"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"}