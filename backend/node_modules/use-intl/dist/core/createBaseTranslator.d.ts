import IntlMessageFormat from 'intl-messageformat';
import { ReactElement, ReactNodeArray } from 'react';
import AbstractIntlMessages from './AbstractIntlMessages';
import Formats from './Formats';
import { InitializedIntlConfiguration } from './IntlConfiguration';
import IntlError from './IntlError';
import TranslationValues, { RichTranslationValues } from './TranslationValues';
import MessageKeys from './utils/MessageKeys';
import NestedKeyOf from './utils/NestedKeyOf';
import NestedValueOf from './utils/NestedValueOf';
export declare function getMessagesOrError<Messages extends AbstractIntlMessages>({ messages, namespace, onError }: {
    messages: Messages;
    namespace?: string;
    onError?(error: IntlError): void;
}): AbstractIntlMessages | IntlError;
export declare type CreateBaseTranslatorProps<Messages> = InitializedIntlConfiguration & {
    cachedFormatsByLocale?: Record<string, Record<string, IntlMessageFormat>>;
    defaultTranslationValues?: RichTranslationValues;
    namespace?: string;
    messagesOrError: Messages | IntlError;
};
export default function createBaseTranslator<Messages extends AbstractIntlMessages, NestedKey extends NestedKeyOf<Messages>>({ cachedFormatsByLocale, defaultTranslationValues, formats: globalFormats, getMessageFallback, locale, messagesOrError, namespace, onError, timeZone }: CreateBaseTranslatorProps<Messages>): {
    <TargetKey extends MessageKeys<NestedValueOf<Messages, NestedKey>, NestedKeyOf<NestedValueOf<Messages, NestedKey>>>>(key: TargetKey, values?: TranslationValues | undefined, formats?: Partial<Formats> | undefined): string;
    rich: (key: string, values?: RichTranslationValues | undefined, formats?: Partial<Formats> | undefined) => string | ReactElement | ReactNodeArray;
    raw(key: string): any;
};
