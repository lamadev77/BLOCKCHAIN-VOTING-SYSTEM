{"version":3,"file":"use-intl.esm5.js","sources":["../../src/core/createTranslatorImpl.tsx"],"sourcesContent":["import AbstractIntlMessages from './AbstractIntlMessages';\nimport {InitializedIntlConfiguration} from './IntlConfiguration';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport {RichTranslationValues, TranslationValue} from './TranslationValues';\nimport createBaseTranslator, {getMessagesOrError} from './createBaseTranslator';\nimport resolveNamespace from './resolveNamespace';\nimport NestedKeyOf from './utils/NestedKeyOf';\n\nexport type CoreRichTranslationValues = Record<\n  string,\n  TranslationValue | ((chunks: string) => string)\n>;\n\nexport type CreateTranslatorImplProps<Messages> =\n  InitializedIntlConfiguration & {\n    namespace: string;\n    messages: Messages;\n  };\n\nexport default function createTranslatorImpl<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>(\n  {\n    getMessageFallback,\n    messages,\n    namespace,\n    onError,\n    ...rest\n  }: CreateTranslatorImplProps<Messages>,\n  namespacePrefix: string\n) {\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the function invocation.\n  messages = messages[namespacePrefix] as Messages;\n  namespace = resolveNamespace(namespace, namespacePrefix) as NestedKey;\n\n  const translator = createBaseTranslator<Messages, NestedKey>({\n    ...rest,\n    onError,\n    getMessageFallback,\n    messagesOrError: getMessagesOrError({\n      messages,\n      namespace,\n      onError\n    }) as Messages | IntlError\n  });\n\n  const originalRich = translator.rich;\n\n  function base(...args: Parameters<typeof translator>) {\n    return translator(...args);\n  }\n\n  // Augment `t.rich` to return plain strings\n  base.rich = (\n    key: Parameters<typeof originalRich>[0],\n    /** Key value pairs for values to interpolate into the message. */\n    values: CoreRichTranslationValues,\n    formats?: Parameters<typeof originalRich>[2]\n  ): string => {\n    // `chunks` is returned as a string when no React element\n    // is used, therefore it's safe to cast this type.\n    const result = originalRich(key, values as RichTranslationValues, formats);\n\n    // When only string chunks are provided to the parser, only strings should be returned here.\n    if (typeof result !== 'string') {\n      const error = new IntlError(\n        IntlErrorCode.FORMATTING_ERROR,\n        process.env.NODE_ENV !== 'production'\n          ? \"`createTranslator` only accepts functions for rich text formatting that receive and return strings.\\n\\nE.g. t.rich('rich', {b: (chunks) => `<b>${chunks}</b>`})\"\n          : undefined\n      );\n\n      onError(error);\n      return getMessageFallback({error, key, namespace});\n    }\n\n    return result;\n  };\n\n  base.raw = translator.raw;\n\n  return base;\n}\n"],"names":["createTranslatorImpl","namespacePrefix","getMessageFallback","messages","namespace","onError","rest","resolveNamespace","translator","createBaseTranslator","messagesOrError","getMessagesOrError","originalRich","rich","base","key","values","formats","result","error","IntlError","IntlErrorCode","FORMATTING_ERROR","process","env","NODE_ENV","undefined","raw"],"mappings":";;;;;;AAmBc,SAAUA,oBAAV,CAWZC,IAAAA,EAAAA,eAXY,EAWW;AAAA,EANrBC,IAAAA,kBAMqB,QANrBA,kBAMqB;AAAA,MALrBC,QAKqB,QALrBA,QAKqB;AAAA,MAJrBC,SAIqB,QAJrBA,SAIqB;AAAA,MAHrBC,OAGqB,QAHrBA,OAGqB;AAAA,MAFlBC,IAEkB,GAAA,6BAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;;AAEvB;AACA;AACAH,EAAAA,QAAQ,GAAGA,QAAQ,CAACF,eAAD,CAAnB,CAAA;AACAG,EAAAA,SAAS,GAAGG,gBAAgB,CAACH,SAAD,EAAYH,eAAZ,CAA5B,CAAA;AAEA,EAAA,IAAMO,UAAU,GAAGC,oBAAoB,CAAA,QAAA,CAAA,EAAA,EAClCH,IADkC,EAAA;AAErCD,IAAAA,OAAO,EAAPA,OAFqC;AAGrCH,IAAAA,kBAAkB,EAAlBA,kBAHqC;AAIrCQ,IAAAA,eAAe,EAAEC,kBAAkB,CAAC;AAClCR,MAAAA,QAAQ,EAARA,QADkC;AAElCC,MAAAA,SAAS,EAATA,SAFkC;AAGlCC,MAAAA,OAAO,EAAPA,OAAAA;AAHkC,KAAD,CAAA;AAJE,GAAvC,CAAA,CAAA,CAAA;AAWA,EAAA,IAAMO,YAAY,GAAGJ,UAAU,CAACK,IAAhC,CAAA;;AAEA,EAAA,SAASC,IAAT,GAAoD;AAClD,IAAON,OAAAA,UAAU,MAAV,CAAP,KAAA,CAAA,EAAA,SAAA,CAAA,CAAA;AACD,GAtBsB;;;AAyBvBM,EAAAA,IAAI,CAACD,IAAL,GAAY,UACVE,GADU;AAEV;AACAC,EAAAA,MAHU,EAIVC,OAJU,EAKA;AACV;AACA;AACA,IAAMC,IAAAA,MAAM,GAAGN,YAAY,CAACG,GAAD,EAAMC,MAAN,EAAuCC,OAAvC,CAA3B,CAHU;;AAMV,IAAA,IAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,MAAMC,IAAAA,KAAK,GAAG,IAAIC,SAAJ,CACZC,aAAa,CAACC,gBADF,EAEZC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI,iKADJ,GAEIC,SAJQ,CAAd,CAAA;AAOArB,MAAAA,OAAO,CAACc,KAAD,CAAP,CAAA;AACA,MAAA,OAAOjB,kBAAkB,CAAC;AAACiB,QAAAA,KAAK,EAALA,KAAD;AAAQJ,QAAAA,GAAG,EAAHA,GAAR;AAAaX,QAAAA,SAAS,EAATA,SAAAA;AAAb,OAAD,CAAzB,CAAA;AACD,KAAA;;AAED,IAAA,OAAOc,MAAP,CAAA;AACD,GAxBD,CAAA;;AA0BAJ,EAAAA,IAAI,CAACa,GAAL,GAAWnB,UAAU,CAACmB,GAAtB,CAAA;AAEA,EAAA,OAAOb,IAAP,CAAA;AACD;;;;"}