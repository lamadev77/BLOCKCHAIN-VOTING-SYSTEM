import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/use-intl.esm.js';
import React, { useEffect } from 'react';
import { defaultOnError, defaultGetMessageFallback } from '../core/use-intl.esm6.js';
import validateMessages from '../core/use-intl.esm7.js';
import IntlContext from './use-intl.esm8.js';

var _excluded = ["children", "onError", "getMessageFallback", "messages"];
function IntlProvider(_ref) {
  var children = _ref.children,
      _ref$onError = _ref.onError,
      onError = _ref$onError === void 0 ? defaultOnError : _ref$onError,
      _ref$getMessageFallba = _ref.getMessageFallback,
      getMessageFallback = _ref$getMessageFallba === void 0 ? defaultGetMessageFallback : _ref$getMessageFallba,
      messages = _ref.messages,
      contextValues = _objectWithoutPropertiesLoose(_ref, _excluded);

  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(function () {
      if (messages) {
        validateMessages(messages, onError);
      }
    }, [messages, onError]);
  }

  return React.createElement(IntlContext.Provider, {
    value: _extends({}, contextValues, {
      messages: messages,
      onError: onError,
      getMessageFallback: getMessageFallback
    })
  }, children);
}

export { IntlProvider as default };
//# sourceMappingURL=use-intl.esm.js.map
