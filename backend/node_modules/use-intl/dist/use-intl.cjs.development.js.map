{"version":3,"file":"use-intl.cjs.development.js","sources":["../src/core/IntlError.tsx","../src/core/convertFormatsToIntlMessageFormat.tsx","../src/core/defaults.tsx","../src/core/createBaseTranslator.tsx","../src/core/resolveNamespace.tsx","../src/core/createTranslatorImpl.tsx","../src/core/createTranslator.tsx","../src/core/createFormatter.tsx","../src/core/createIntl.tsx","../src/core/validateMessages.tsx","../src/react/IntlContext.tsx","../src/react/IntlProvider.tsx","../src/react/useIntlContext.tsx","../src/react/useTranslationsImpl.tsx","../src/react/useTranslations.tsx","../src/react/useLocale.tsx","../src/react/useNow.tsx","../src/react/useTimeZone.tsx","../src/react/useFormatter.tsx","../src/react/useIntl.tsx"],"sourcesContent":["export enum IntlErrorCode {\n  MISSING_MESSAGE = 'MISSING_MESSAGE',\n  MISSING_FORMAT = 'MISSING_FORMAT',\n  INSUFFICIENT_PATH = 'INSUFFICIENT_PATH',\n  INVALID_MESSAGE = 'INVALID_MESSAGE',\n  INVALID_KEY = 'INVALID_KEY',\n  FORMATTING_ERROR = 'FORMATTING_ERROR'\n}\n\nexport default class IntlError extends Error {\n  public readonly code: IntlErrorCode;\n  public readonly originalMessage: string | undefined;\n\n  constructor(code: IntlErrorCode, originalMessage?: string) {\n    let message: string = code;\n    if (originalMessage) {\n      message += ': ' + originalMessage;\n    }\n    super(message);\n\n    this.code = code;\n    if (originalMessage) {\n      this.originalMessage = originalMessage;\n    }\n  }\n}\n","import {Formats as IntlFormats} from 'intl-messageformat';\nimport DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\n\nfunction setTimeZoneInFormats(\n  formats: Record<string, DateTimeFormatOptions> | undefined,\n  timeZone: string\n) {\n  if (!formats) return formats;\n\n  // The only way to set a time zone with `intl-messageformat` is to merge it into the formats\n  // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15\n  return Object.keys(formats).reduce(\n    (acc: Record<string, DateTimeFormatOptions>, key) => {\n      acc[key] = {\n        timeZone,\n        ...formats[key]\n      };\n      return acc;\n    },\n    {}\n  );\n}\n\n/**\n * `intl-messageformat` uses separate keys for `date` and `time`, but there's\n * only one native API: `Intl.DateTimeFormat`. Additionally you might want to\n * include both a time and a date in a value, therefore the separation doesn't\n * seem so useful. We offer a single `dateTime` namespace instead, but we have\n * to convert the format before `intl-messageformat` can be used.\n */\nexport default function convertFormatsToIntlMessageFormat(\n  formats: Partial<Formats>,\n  timeZone?: string\n): Partial<IntlFormats> {\n  const formatsWithTimeZone = timeZone\n    ? {...formats, dateTime: setTimeZoneInFormats(formats.dateTime, timeZone)}\n    : formats;\n\n  return {\n    ...formatsWithTimeZone,\n    date: formatsWithTimeZone?.dateTime,\n    time: formatsWithTimeZone?.dateTime\n  };\n}\n","import IntlError from './IntlError';\n\n/**\n * Contains defaults that are used for all entry points into the core.\n * See also `InitializedIntlConfiguration`.\n */\n\nexport function defaultGetMessageFallback(props: {\n  error: IntlError;\n  key: string;\n  namespace?: string;\n}) {\n  return [props.namespace, props.key].filter((part) => part != null).join('.');\n}\n\nexport function defaultOnError(error: IntlError) {\n  console.error(error);\n}\n","// eslint-disable-next-line import/no-named-as-default\nimport IntlMessageFormat from 'intl-messageformat';\nimport {\n  cloneElement,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  ReactNodeArray\n} from 'react';\nimport AbstractIntlMessages from './AbstractIntlMessages';\nimport Formats from './Formats';\nimport {InitializedIntlConfiguration} from './IntlConfiguration';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport TranslationValues, {RichTranslationValues} from './TranslationValues';\nimport convertFormatsToIntlMessageFormat from './convertFormatsToIntlMessageFormat';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\nfunction resolvePath(\n  messages: AbstractIntlMessages | undefined,\n  key: string,\n  namespace?: string\n) {\n  if (!messages) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? `No messages available at \\`${namespace}\\`.`\n        : undefined\n    );\n  }\n\n  let message = messages;\n\n  key.split('.').forEach((part) => {\n    const next = (message as any)[part];\n\n    if (part == null || next == null) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `Could not resolve \\`${key}\\` in ${\n              namespace ? `\\`${namespace}\\`` : 'messages'\n            }.`\n          : undefined\n      );\n    }\n\n    message = next;\n  });\n\n  return message;\n}\n\nfunction prepareTranslationValues(values: RichTranslationValues) {\n  if (Object.keys(values).length === 0) return undefined;\n\n  // Workaround for https://github.com/formatjs/formatjs/issues/1467\n  const transformedValues: RichTranslationValues = {};\n  Object.keys(values).forEach((key) => {\n    let index = 0;\n    const value = values[key];\n\n    let transformed;\n    if (typeof value === 'function') {\n      transformed = (chunks: ReactNode) => {\n        const result = value(chunks);\n\n        return isValidElement(result)\n          ? cloneElement(result, {key: key + index++})\n          : result;\n      };\n    } else {\n      transformed = value;\n    }\n\n    transformedValues[key] = transformed;\n  });\n\n  return transformedValues;\n}\n\nexport function getMessagesOrError<Messages extends AbstractIntlMessages>({\n  messages,\n  namespace,\n  onError = defaultOnError\n}: {\n  messages: Messages;\n  namespace?: string;\n  onError?(error: IntlError): void;\n}) {\n  try {\n    if (!messages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages were configured on the provider.`\n          : undefined\n      );\n    }\n\n    const retrievedMessages = namespace\n      ? resolvePath(messages, namespace)\n      : messages;\n\n    if (!retrievedMessages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages for namespace \\`${namespace}\\` found.`\n          : undefined\n      );\n    }\n\n    return retrievedMessages;\n  } catch (error) {\n    const intlError = new IntlError(\n      IntlErrorCode.MISSING_MESSAGE,\n      (error as Error).message\n    );\n    onError(intlError);\n    return intlError;\n  }\n}\n\nexport type CreateBaseTranslatorProps<Messages> =\n  InitializedIntlConfiguration & {\n    cachedFormatsByLocale?: Record<string, Record<string, IntlMessageFormat>>;\n    defaultTranslationValues?: RichTranslationValues;\n    namespace?: string;\n    messagesOrError: Messages | IntlError;\n  };\n\nexport default function createBaseTranslator<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>({\n  cachedFormatsByLocale,\n  defaultTranslationValues,\n  formats: globalFormats,\n  getMessageFallback = defaultGetMessageFallback,\n  locale,\n  messagesOrError,\n  namespace,\n  onError,\n  timeZone\n}: CreateBaseTranslatorProps<Messages>) {\n  function getFallbackFromErrorAndNotify(\n    key: string,\n    code: IntlErrorCode,\n    message?: string\n  ) {\n    const error = new IntlError(code, message);\n    onError(error);\n    return getMessageFallback({error, key, namespace});\n  }\n\n  function translateBaseFn(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: RichTranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    let message;\n    try {\n      message = resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n\n    const cacheKey = [namespace, key, message]\n      .filter((part) => part != null)\n      .join('.');\n\n    let messageFormat;\n    if (cachedFormatsByLocale?.[locale]?.[cacheKey]) {\n      messageFormat = cachedFormatsByLocale?.[locale][cacheKey];\n    } else {\n      if (typeof message === 'object') {\n        return getFallbackFromErrorAndNotify(\n          key,\n          IntlErrorCode.INSUFFICIENT_PATH,\n          process.env.NODE_ENV !== 'production'\n            ? `Insufficient path specified for \\`${key}\\` in \\`${\n                namespace ? `\\`${namespace}\\`` : 'messages'\n              }\\`.`\n            : undefined\n        );\n      }\n\n      try {\n        messageFormat = new IntlMessageFormat(\n          message,\n          locale,\n          convertFormatsToIntlMessageFormat(\n            {...globalFormats, ...formats},\n            timeZone\n          )\n        );\n      } catch (error) {\n        return getFallbackFromErrorAndNotify(\n          key,\n          IntlErrorCode.INVALID_MESSAGE,\n          (error as Error).message\n        );\n      }\n\n      if (cachedFormatsByLocale) {\n        if (!cachedFormatsByLocale[locale]) {\n          cachedFormatsByLocale[locale] = {};\n        }\n        cachedFormatsByLocale[locale][cacheKey] = messageFormat;\n      }\n    }\n\n    try {\n      const formattedMessage = messageFormat.format(\n        // @ts-ignore `intl-messageformat` expects a different format\n        // for rich text elements since a recent minor update. This\n        // needs to be evaluated in detail, possibly also in regards\n        // to be able to format to parts.\n        prepareTranslationValues({...defaultTranslationValues, ...values})\n      );\n\n      if (formattedMessage == null) {\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `Unable to format \\`${key}\\` in ${\n                namespace ? `namespace \\`${namespace}\\`` : 'messages'\n              }`\n            : undefined\n        );\n      }\n\n      // Limit the function signature to return strings or React elements\n      return isValidElement(formattedMessage) ||\n        // Arrays of React elements\n        Array.isArray(formattedMessage) ||\n        typeof formattedMessage === 'string'\n        ? formattedMessage\n        : String(formattedMessage);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.FORMATTING_ERROR,\n        (error as Error).message\n      );\n    }\n  }\n\n  function translateFn<\n    TargetKey extends MessageKeys<\n      NestedValueOf<Messages, NestedKey>,\n      NestedKeyOf<NestedValueOf<Messages, NestedKey>>\n    >\n  >(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: TargetKey,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: TranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string {\n    const result = translateBaseFn(key, values, formats);\n\n    if (typeof result !== 'string') {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.INVALID_MESSAGE,\n        process.env.NODE_ENV !== 'production'\n          ? `The message \\`${key}\\` in ${\n              namespace ? `namespace \\`${namespace}\\`` : 'messages'\n            } didn't resolve to a string. If you want to format rich text, use \\`t.rich\\` instead.`\n          : undefined\n      );\n    }\n\n    return result;\n  }\n\n  translateFn.rich = translateBaseFn;\n\n  translateFn.raw = (\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string\n  ): any => {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    try {\n      return resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n  };\n\n  return translateFn;\n}\n","/**\n * For the strictly typed messages to work we have to wrap the namespace into\n * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045\n */\nexport default function resolveNamespace(\n  namespace: string,\n  namespacePrefix: string\n) {\n  return namespace === namespacePrefix\n    ? undefined\n    : namespace.slice((namespacePrefix + '.').length);\n}\n","import AbstractIntlMessages from './AbstractIntlMessages';\nimport {InitializedIntlConfiguration} from './IntlConfiguration';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport {RichTranslationValues, TranslationValue} from './TranslationValues';\nimport createBaseTranslator, {getMessagesOrError} from './createBaseTranslator';\nimport resolveNamespace from './resolveNamespace';\nimport NestedKeyOf from './utils/NestedKeyOf';\n\nexport type CoreRichTranslationValues = Record<\n  string,\n  TranslationValue | ((chunks: string) => string)\n>;\n\nexport type CreateTranslatorImplProps<Messages> =\n  InitializedIntlConfiguration & {\n    namespace: string;\n    messages: Messages;\n  };\n\nexport default function createTranslatorImpl<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>(\n  {\n    getMessageFallback,\n    messages,\n    namespace,\n    onError,\n    ...rest\n  }: CreateTranslatorImplProps<Messages>,\n  namespacePrefix: string\n) {\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the function invocation.\n  messages = messages[namespacePrefix] as Messages;\n  namespace = resolveNamespace(namespace, namespacePrefix) as NestedKey;\n\n  const translator = createBaseTranslator<Messages, NestedKey>({\n    ...rest,\n    onError,\n    getMessageFallback,\n    messagesOrError: getMessagesOrError({\n      messages,\n      namespace,\n      onError\n    }) as Messages | IntlError\n  });\n\n  const originalRich = translator.rich;\n\n  function base(...args: Parameters<typeof translator>) {\n    return translator(...args);\n  }\n\n  // Augment `t.rich` to return plain strings\n  base.rich = (\n    key: Parameters<typeof originalRich>[0],\n    /** Key value pairs for values to interpolate into the message. */\n    values: CoreRichTranslationValues,\n    formats?: Parameters<typeof originalRich>[2]\n  ): string => {\n    // `chunks` is returned as a string when no React element\n    // is used, therefore it's safe to cast this type.\n    const result = originalRich(key, values as RichTranslationValues, formats);\n\n    // When only string chunks are provided to the parser, only strings should be returned here.\n    if (typeof result !== 'string') {\n      const error = new IntlError(\n        IntlErrorCode.FORMATTING_ERROR,\n        process.env.NODE_ENV !== 'production'\n          ? \"`createTranslator` only accepts functions for rich text formatting that receive and return strings.\\n\\nE.g. t.rich('rich', {b: (chunks) => `<b>${chunks}</b>`})\"\n          : undefined\n      );\n\n      onError(error);\n      return getMessageFallback({error, key, namespace});\n    }\n\n    return result;\n  };\n\n  base.raw = translator.raw;\n\n  return base;\n}\n","import Formats from './Formats';\nimport IntlConfiguration from './IntlConfiguration';\nimport TranslationValues from './TranslationValues';\nimport createTranslatorImpl, {\n  CoreRichTranslationValues\n} from './createTranslatorImpl';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NamespaceKeys from './utils/NamespaceKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */\nexport default function createTranslator<\n  NestedKey extends NamespaceKeys<\n    IntlMessages,\n    NestedKeyOf<IntlMessages>\n  > = never\n>({\n  onError = defaultOnError,\n  getMessageFallback = defaultGetMessageFallback,\n  messages,\n  namespace,\n  ...rest\n}: IntlConfiguration & {\n  messages: IntlMessages;\n  namespace?: NestedKey;\n}): // Explicitly defining the return type is necessary as TypeScript would get it wrong\n{\n  // Default invocation\n  <\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: TranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `rich`\n  rich<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: CoreRichTranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `raw`\n  raw<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey\n  ): any;\n} {\n  // We have to wrap the actual function so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  return createTranslatorImpl<\n    {'!': IntlMessages},\n    [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n  >(\n    {\n      ...rest,\n      onError,\n      getMessageFallback,\n      messages: {'!': messages},\n      // @ts-ignore\n      namespace: namespace ? `!.${namespace}` : '!'\n    },\n    '!'\n  );\n}\n","import DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport NumberFormatOptions from './NumberFormatOptions';\nimport {defaultOnError} from './defaults';\n\nconst MINUTE = 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst YEAR = DAY * 365;\n\nfunction getRelativeTimeFormatConfig(seconds: number) {\n  const absValue = Math.abs(seconds);\n  let value, unit: Intl.RelativeTimeFormatUnit;\n\n  // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n  // will include fractions like '2.1 hours ago'.\n\n  if (absValue < MINUTE) {\n    unit = 'second';\n    value = Math.round(seconds);\n  } else if (absValue < HOUR) {\n    unit = 'minute';\n    value = Math.round(seconds / MINUTE);\n  } else if (absValue < DAY) {\n    unit = 'hour';\n    value = Math.round(seconds / HOUR);\n  } else if (absValue < WEEK) {\n    unit = 'day';\n    value = Math.round(seconds / DAY);\n  } else if (absValue < MONTH) {\n    unit = 'week';\n    value = Math.round(seconds / WEEK);\n  } else if (absValue < YEAR) {\n    unit = 'month';\n    value = Math.round(seconds / MONTH);\n  } else {\n    unit = 'year';\n    value = Math.round(seconds / YEAR);\n  }\n\n  return {value, unit};\n}\n\ntype Props = {\n  locale: string;\n  timeZone?: string;\n  onError?(error: IntlError): void;\n  formats?: Partial<Formats>;\n  now?: Date;\n};\n\nexport default function createFormatter({\n  formats,\n  locale,\n  now: globalNow,\n  onError = defaultOnError,\n  timeZone\n}: Props) {\n  function resolveFormatOrOptions<Options>(\n    typeFormats: Record<string, Options> | undefined,\n    formatOrOptions?: string | Options\n  ) {\n    let options;\n    if (typeof formatOrOptions === 'string') {\n      const formatName = formatOrOptions;\n      options = typeFormats?.[formatName];\n\n      if (!options) {\n        const error = new IntlError(\n          IntlErrorCode.MISSING_FORMAT,\n          process.env.NODE_ENV !== 'production'\n            ? `Format \\`${formatName}\\` is not available. You can configure it on the provider or provide custom options.`\n            : undefined\n        );\n        onError(error);\n        throw error;\n      }\n    } else {\n      options = formatOrOptions;\n    }\n\n    return options;\n  }\n\n  function getFormattedValue<Value, Options>(\n    value: Value,\n    formatOrOptions: string | Options | undefined,\n    typeFormats: Record<string, Options> | undefined,\n    formatter: (options?: Options) => string\n  ) {\n    let options;\n    try {\n      options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n    } catch (error) {\n      return String(value);\n    }\n\n    try {\n      return formatter(options);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(value);\n    }\n  }\n\n  function dateTime(\n    /** If a number is supplied, this is interpreted as a UTC timestamp. */\n    value: Date | number,\n    /** If a time zone is supplied, the `value` is converted to that time zone.\n     * Otherwise the user time zone will be used. */\n    formatOrOptions?: string | DateTimeFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.dateTime,\n      (options) => {\n        if (timeZone && !options?.timeZone) {\n          options = {...options, timeZone};\n        }\n\n        return new Intl.DateTimeFormat(locale, options).format(value);\n      }\n    );\n  }\n\n  function number(\n    value: number | bigint,\n    formatOrOptions?: string | NumberFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.number,\n      (options) => new Intl.NumberFormat(locale, options).format(value)\n    );\n  }\n\n  function relativeTime(\n    /** The date time that needs to be formatted. */\n    date: number | Date,\n    /** The reference point in time to which `date` will be formatted in relation to.  */\n    now?: number | Date\n  ) {\n    try {\n      if (!now) {\n        if (globalNow) {\n          now = globalNow;\n        } else {\n          throw new Error(\n            process.env.NODE_ENV !== 'production'\n              ? `The \\`now\\` parameter wasn't provided and there was no global fallback configured on the provider.`\n              : undefined\n          );\n        }\n      }\n\n      const dateDate = date instanceof Date ? date : new Date(date);\n      const nowDate = now instanceof Date ? now : new Date(now);\n\n      const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n      const {unit, value} = getRelativeTimeFormatConfig(seconds);\n\n      return new Intl.RelativeTimeFormat(locale, {\n        numeric: 'auto'\n      }).format(value, unit);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(date);\n    }\n  }\n\n  return {dateTime, number, relativeTime};\n}\n","import createFormatter from './createFormatter';\n\n/** @deprecated Switch to `createFormatter` */\nexport default function createIntl(\n  ...args: Parameters<typeof createFormatter>\n) {\n  const formatter = createFormatter(...args);\n  return {\n    formatDateTime: formatter.dateTime,\n    formatNumber: formatter.number,\n    formatRelativeTime: formatter.relativeTime\n  };\n}\n","import AbstractIntlMessages from './AbstractIntlMessages';\nimport IntlError, {IntlErrorCode} from './IntlError';\n\nfunction validateMessagesSegment(\n  messages: AbstractIntlMessages,\n  invalidKeyLabels: Array<string>,\n  parentPath?: string\n) {\n  Object.entries(messages).forEach(([key, messageOrMessages]) => {\n    if (key.includes('.')) {\n      let keyLabel = key;\n      if (parentPath) keyLabel += ` (at ${parentPath})`;\n      invalidKeyLabels.push(keyLabel);\n    }\n\n    if (messageOrMessages != null && typeof messageOrMessages === 'object') {\n      validateMessagesSegment(\n        messageOrMessages,\n        invalidKeyLabels,\n        [parentPath, key].filter((part) => part != null).join('.')\n      );\n    }\n  });\n}\n\nexport default function validateMessages(\n  messages: AbstractIntlMessages,\n  onError: (error: IntlError) => void\n) {\n  const invalidKeyLabels: Array<string> = [];\n  validateMessagesSegment(messages, invalidKeyLabels);\n\n  if (invalidKeyLabels.length > 0) {\n    onError(\n      new IntlError(\n        IntlErrorCode.INVALID_KEY,\n        `Namespace keys can not contain the character \".\" as this is used to express nesting. Please remove it or replace it with another character.\\n\\nInvalid ${\n          invalidKeyLabels.length === 1 ? 'key' : 'keys'\n        }: ${invalidKeyLabels.join(', ')}`\n      )\n    );\n  }\n}\n","import {createContext} from 'react';\nimport AbstractIntlMessages from '../core/AbstractIntlMessages';\nimport Formats from '../core/Formats';\nimport IntlError from '../core/IntlError';\nimport {RichTranslationValues} from '../core/TranslationValues';\n\nexport type IntlContextShape = {\n  messages?: AbstractIntlMessages;\n  locale: string;\n  formats?: Partial<Formats>;\n  timeZone?: string;\n  onError(error: IntlError): void;\n  getMessageFallback(info: {\n    error: IntlError;\n    key: string;\n    namespace?: string;\n  }): string;\n  now?: Date;\n  defaultTranslationValues?: RichTranslationValues;\n};\n\nconst IntlContext = createContext<IntlContextShape | undefined>(undefined);\n\nexport default IntlContext;\n","import React, {ReactNode, useEffect} from 'react';\nimport {AbstractIntlMessages} from '../core';\nimport IntlConfiguration from '../core/IntlConfiguration';\nimport {RichTranslationValues} from '../core/TranslationValues';\nimport {defaultGetMessageFallback, defaultOnError} from '../core/defaults';\nimport validateMessages from '../core/validateMessages';\nimport IntlContext from './IntlContext';\n\ntype Props = IntlConfiguration & {\n  /** All components that use the provided hooks should be within this tree. */\n  children: ReactNode;\n  /** Global default values for translation values and rich text elements.\n   * Can be used for consistent usage or styling of rich text elements.\n   * Defaults will be overidden by locally provided values. */\n  defaultTranslationValues?: RichTranslationValues;\n  /** All messages that will be available in your components. */\n  messages?: AbstractIntlMessages;\n};\n\nexport default function IntlProvider({\n  children,\n  onError = defaultOnError,\n  getMessageFallback = defaultGetMessageFallback,\n  messages,\n  ...contextValues\n}: Props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (messages) {\n        validateMessages(messages, onError);\n      }\n    }, [messages, onError]);\n  }\n\n  return (\n    <IntlContext.Provider\n      value={{...contextValues, messages, onError, getMessageFallback}}\n    >\n      {children}\n    </IntlContext.Provider>\n  );\n}\n","import {useContext} from 'react';\nimport IntlContext from './IntlContext';\n\nexport default function useIntlContext() {\n  const context = useContext(IntlContext);\n\n  if (!context) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? 'No intl context found. Have you configured the provider?'\n        : undefined\n    );\n  }\n\n  return context;\n}\n","import {IntlMessageFormat} from 'intl-messageformat';\nimport {useMemo, useRef} from 'react';\nimport AbstractIntlMessages from '../core/AbstractIntlMessages';\nimport createBaseTranslator, {\n  getMessagesOrError\n} from '../core/createBaseTranslator';\nimport resolveNamespace from '../core/resolveNamespace';\nimport NestedKeyOf from '../core/utils/NestedKeyOf';\nimport useIntlContext from './useIntlContext';\n\nexport default function useTranslationsImpl<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>(allMessages: Messages, namespace: NestedKey, namespacePrefix: string) {\n  const {\n    defaultTranslationValues,\n    formats: globalFormats,\n    getMessageFallback,\n    locale,\n    onError,\n    timeZone\n  } = useIntlContext();\n\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the hook invocation.\n  allMessages = allMessages[namespacePrefix] as Messages;\n  namespace = resolveNamespace(namespace, namespacePrefix) as NestedKey;\n\n  const cachedFormatsByLocaleRef = useRef<\n    Record<string, Record<string, IntlMessageFormat>>\n  >({});\n\n  const messagesOrError = useMemo(\n    () => getMessagesOrError({messages: allMessages, namespace, onError}),\n    [allMessages, namespace, onError]\n  );\n\n  const translate = useMemo(\n    () =>\n      createBaseTranslator({\n        cachedFormatsByLocale: cachedFormatsByLocaleRef.current,\n        getMessageFallback,\n        messagesOrError,\n        defaultTranslationValues,\n        namespace,\n        onError,\n        formats: globalFormats,\n        locale,\n        timeZone\n      }),\n    [\n      getMessageFallback,\n      messagesOrError,\n      defaultTranslationValues,\n      namespace,\n      onError,\n      globalFormats,\n      locale,\n      timeZone\n    ]\n  );\n\n  return translate;\n}\n","import {ReactElement, ReactNodeArray} from 'react';\nimport Formats from '../core/Formats';\nimport TranslationValues, {\n  RichTranslationValues\n} from '../core/TranslationValues';\nimport MessageKeys from '../core/utils/MessageKeys';\nimport NamespaceKeys from '../core/utils/NamespaceKeys';\nimport NestedKeyOf from '../core/utils/NestedKeyOf';\nimport NestedValueOf from '../core/utils/NestedValueOf';\nimport useIntlContext from './useIntlContext';\nimport useTranslationsImpl from './useTranslationsImpl';\n\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */\nexport default function useTranslations<\n  NestedKey extends NamespaceKeys<\n    IntlMessages,\n    NestedKeyOf<IntlMessages>\n  > = never\n>(\n  namespace?: NestedKey\n): // Explicitly defining the return type is necessary as TypeScript would get it wrong\n{\n  // Default invocation\n  <\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: TranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `rich`\n  rich<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: RichTranslationValues,\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray;\n\n  // `raw`\n  raw<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey\n  ): any;\n} {\n  const context = useIntlContext();\n  const messages = context.messages as IntlMessages;\n\n  // We have to wrap the actual hook so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  return useTranslationsImpl<\n    {'!': IntlMessages},\n    [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n  >(\n    {'!': messages},\n    // @ts-ignore\n    namespace ? `!.${namespace}` : '!',\n    '!'\n  );\n}\n","import useIntlContext from './useIntlContext';\n\nexport default function useLocale() {\n  return useIntlContext().locale;\n}\n","import {useState, useEffect} from 'react';\nimport useIntlContext from './useIntlContext';\n\ntype Options = {\n  updateInterval?: number;\n};\n\nfunction getNow() {\n  return new Date();\n}\n\n/**\n * Reading the current date via `new Date()` in components should be avoided, as\n * it causes components to be impure and can lead to flaky tests. Instead, this\n * hook can be used.\n *\n * By default, it returns the time when the component mounts. If `updateInterval`\n * is specified, the value will be updated based on the interval.\n *\n * You can however also return a static value from this hook, if you\n * configure the `now` parameter on the context provider. Note however,\n * that if `updateInterval` is configured in this case, the component\n * will initialize with the global value, but will afterwards update\n * continuously based on the interval.\n *\n * For unit tests, this can be mocked to a constant value. For end-to-end\n * testing, an environment parameter can be passed to the `now` parameter\n * of the provider to mock this to a static value.\n */\nexport default function useNow(options?: Options) {\n  const updateInterval = options?.updateInterval;\n\n  const {now: globalNow} = useIntlContext();\n  const [now, setNow] = useState(globalNow || getNow());\n\n  useEffect(() => {\n    if (!updateInterval) return;\n\n    const intervalId = setInterval(() => {\n      setNow(getNow());\n    }, updateInterval);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [globalNow, updateInterval]);\n\n  return now;\n}\n","import useIntlContext from './useIntlContext';\n\nexport default function useTimeZone() {\n  return useIntlContext().timeZone;\n}\n","import {useMemo} from 'react';\nimport createFormatter from '../core/createFormatter';\nimport useIntlContext from './useIntlContext';\n\nexport default function useFormatter() {\n  const {formats, locale, now: globalNow, onError, timeZone} = useIntlContext();\n\n  return useMemo(\n    () =>\n      createFormatter({\n        formats,\n        locale,\n        now: globalNow,\n        onError,\n        timeZone\n      }),\n    [formats, globalNow, locale, onError, timeZone]\n  );\n}\n","import {useMemo} from 'react';\nimport createIntl from '../core/createIntl';\nimport useIntlContext from './useIntlContext';\n\nlet hasWarned = false;\n\n/** @deprecated  Switch to `useFormatter` */\nexport default function useIntl() {\n  const {formats, locale, now: globalNow, onError, timeZone} = useIntlContext();\n\n  if (!hasWarned) {\n    hasWarned = true;\n    console.warn(\n      '`useIntl()` is deprecated and will be removed in the next major version. Please switch to `useFormatter()`.'\n    );\n  }\n\n  return useMemo(\n    () =>\n      createIntl({\n        formats,\n        locale,\n        now: globalNow,\n        onError,\n        timeZone\n      }),\n    [formats, globalNow, locale, onError, timeZone]\n  );\n}\n"],"names":["IntlErrorCode","IntlError","code","originalMessage","message","Error","setTimeZoneInFormats","formats","timeZone","Object","keys","reduce","acc","key","convertFormatsToIntlMessageFormat","formatsWithTimeZone","dateTime","date","time","defaultGetMessageFallback","props","namespace","filter","part","join","defaultOnError","error","console","resolvePath","messages","split","forEach","next","prepareTranslationValues","values","length","undefined","transformedValues","index","value","transformed","chunks","result","isValidElement","cloneElement","getMessagesOrError","onError","process","retrievedMessages","intlError","MISSING_MESSAGE","createBaseTranslator","cachedFormatsByLocale","defaultTranslationValues","globalFormats","getMessageFallback","locale","messagesOrError","getFallbackFromErrorAndNotify","translateBaseFn","cacheKey","messageFormat","INSUFFICIENT_PATH","IntlMessageFormat","INVALID_MESSAGE","formattedMessage","format","Array","isArray","String","FORMATTING_ERROR","translateFn","rich","raw","resolveNamespace","namespacePrefix","slice","createTranslatorImpl","rest","_excluded","translator","originalRich","base","createTranslator","MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","getRelativeTimeFormatConfig","seconds","absValue","Math","abs","unit","round","createFormatter","globalNow","now","resolveFormatOrOptions","typeFormats","formatOrOptions","options","formatName","MISSING_FORMAT","getFormattedValue","formatter","Intl","DateTimeFormat","number","NumberFormat","relativeTime","dateDate","Date","nowDate","getTime","RelativeTimeFormat","numeric","createIntl","formatDateTime","formatNumber","formatRelativeTime","validateMessagesSegment","invalidKeyLabels","parentPath","entries","messageOrMessages","includes","keyLabel","push","validateMessages","INVALID_KEY","IntlContext","createContext","IntlProvider","children","contextValues","useEffect","React","Provider","useIntlContext","context","useContext","useTranslationsImpl","allMessages","cachedFormatsByLocaleRef","useRef","useMemo","translate","current","useTranslations","useLocale","getNow","useNow","updateInterval","useState","setNow","intervalId","setInterval","clearInterval","useTimeZone","useFormatter","hasWarned","useIntl","warn"],"mappings":"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"}