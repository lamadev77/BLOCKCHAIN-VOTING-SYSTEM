{"version":3,"file":"use-intl.esm8.js","sources":["../../src/core/createBaseTranslator.tsx"],"sourcesContent":["// eslint-disable-next-line import/no-named-as-default\nimport IntlMessageFormat from 'intl-messageformat';\nimport {\n  cloneElement,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  ReactNodeArray\n} from 'react';\nimport AbstractIntlMessages from './AbstractIntlMessages';\nimport Formats from './Formats';\nimport {InitializedIntlConfiguration} from './IntlConfiguration';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport TranslationValues, {RichTranslationValues} from './TranslationValues';\nimport convertFormatsToIntlMessageFormat from './convertFormatsToIntlMessageFormat';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\nfunction resolvePath(\n  messages: AbstractIntlMessages | undefined,\n  key: string,\n  namespace?: string\n) {\n  if (!messages) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? `No messages available at \\`${namespace}\\`.`\n        : undefined\n    );\n  }\n\n  let message = messages;\n\n  key.split('.').forEach((part) => {\n    const next = (message as any)[part];\n\n    if (part == null || next == null) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `Could not resolve \\`${key}\\` in ${\n              namespace ? `\\`${namespace}\\`` : 'messages'\n            }.`\n          : undefined\n      );\n    }\n\n    message = next;\n  });\n\n  return message;\n}\n\nfunction prepareTranslationValues(values: RichTranslationValues) {\n  if (Object.keys(values).length === 0) return undefined;\n\n  // Workaround for https://github.com/formatjs/formatjs/issues/1467\n  const transformedValues: RichTranslationValues = {};\n  Object.keys(values).forEach((key) => {\n    let index = 0;\n    const value = values[key];\n\n    let transformed;\n    if (typeof value === 'function') {\n      transformed = (chunks: ReactNode) => {\n        const result = value(chunks);\n\n        return isValidElement(result)\n          ? cloneElement(result, {key: key + index++})\n          : result;\n      };\n    } else {\n      transformed = value;\n    }\n\n    transformedValues[key] = transformed;\n  });\n\n  return transformedValues;\n}\n\nexport function getMessagesOrError<Messages extends AbstractIntlMessages>({\n  messages,\n  namespace,\n  onError = defaultOnError\n}: {\n  messages: Messages;\n  namespace?: string;\n  onError?(error: IntlError): void;\n}) {\n  try {\n    if (!messages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages were configured on the provider.`\n          : undefined\n      );\n    }\n\n    const retrievedMessages = namespace\n      ? resolvePath(messages, namespace)\n      : messages;\n\n    if (!retrievedMessages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages for namespace \\`${namespace}\\` found.`\n          : undefined\n      );\n    }\n\n    return retrievedMessages;\n  } catch (error) {\n    const intlError = new IntlError(\n      IntlErrorCode.MISSING_MESSAGE,\n      (error as Error).message\n    );\n    onError(intlError);\n    return intlError;\n  }\n}\n\nexport type CreateBaseTranslatorProps<Messages> =\n  InitializedIntlConfiguration & {\n    cachedFormatsByLocale?: Record<string, Record<string, IntlMessageFormat>>;\n    defaultTranslationValues?: RichTranslationValues;\n    namespace?: string;\n    messagesOrError: Messages | IntlError;\n  };\n\nexport default function createBaseTranslator<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>({\n  cachedFormatsByLocale,\n  defaultTranslationValues,\n  formats: globalFormats,\n  getMessageFallback = defaultGetMessageFallback,\n  locale,\n  messagesOrError,\n  namespace,\n  onError,\n  timeZone\n}: CreateBaseTranslatorProps<Messages>) {\n  function getFallbackFromErrorAndNotify(\n    key: string,\n    code: IntlErrorCode,\n    message?: string\n  ) {\n    const error = new IntlError(code, message);\n    onError(error);\n    return getMessageFallback({error, key, namespace});\n  }\n\n  function translateBaseFn(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: RichTranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    let message;\n    try {\n      message = resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n\n    const cacheKey = [namespace, key, message]\n      .filter((part) => part != null)\n      .join('.');\n\n    let messageFormat;\n    if (cachedFormatsByLocale?.[locale]?.[cacheKey]) {\n      messageFormat = cachedFormatsByLocale?.[locale][cacheKey];\n    } else {\n      if (typeof message === 'object') {\n        return getFallbackFromErrorAndNotify(\n          key,\n          IntlErrorCode.INSUFFICIENT_PATH,\n          process.env.NODE_ENV !== 'production'\n            ? `Insufficient path specified for \\`${key}\\` in \\`${\n                namespace ? `\\`${namespace}\\`` : 'messages'\n              }\\`.`\n            : undefined\n        );\n      }\n\n      try {\n        messageFormat = new IntlMessageFormat(\n          message,\n          locale,\n          convertFormatsToIntlMessageFormat(\n            {...globalFormats, ...formats},\n            timeZone\n          )\n        );\n      } catch (error) {\n        return getFallbackFromErrorAndNotify(\n          key,\n          IntlErrorCode.INVALID_MESSAGE,\n          (error as Error).message\n        );\n      }\n\n      if (cachedFormatsByLocale) {\n        if (!cachedFormatsByLocale[locale]) {\n          cachedFormatsByLocale[locale] = {};\n        }\n        cachedFormatsByLocale[locale][cacheKey] = messageFormat;\n      }\n    }\n\n    try {\n      const formattedMessage = messageFormat.format(\n        // @ts-ignore `intl-messageformat` expects a different format\n        // for rich text elements since a recent minor update. This\n        // needs to be evaluated in detail, possibly also in regards\n        // to be able to format to parts.\n        prepareTranslationValues({...defaultTranslationValues, ...values})\n      );\n\n      if (formattedMessage == null) {\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `Unable to format \\`${key}\\` in ${\n                namespace ? `namespace \\`${namespace}\\`` : 'messages'\n              }`\n            : undefined\n        );\n      }\n\n      // Limit the function signature to return strings or React elements\n      return isValidElement(formattedMessage) ||\n        // Arrays of React elements\n        Array.isArray(formattedMessage) ||\n        typeof formattedMessage === 'string'\n        ? formattedMessage\n        : String(formattedMessage);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.FORMATTING_ERROR,\n        (error as Error).message\n      );\n    }\n  }\n\n  function translateFn<\n    TargetKey extends MessageKeys<\n      NestedValueOf<Messages, NestedKey>,\n      NestedKeyOf<NestedValueOf<Messages, NestedKey>>\n    >\n  >(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: TargetKey,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: TranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string {\n    const result = translateBaseFn(key, values, formats);\n\n    if (typeof result !== 'string') {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.INVALID_MESSAGE,\n        process.env.NODE_ENV !== 'production'\n          ? `The message \\`${key}\\` in ${\n              namespace ? `namespace \\`${namespace}\\`` : 'messages'\n            } didn't resolve to a string. If you want to format rich text, use \\`t.rich\\` instead.`\n          : undefined\n      );\n    }\n\n    return result;\n  }\n\n  translateFn.rich = translateBaseFn;\n\n  translateFn.raw = (\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string\n  ): any => {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    try {\n      return resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n  };\n\n  return translateFn;\n}\n"],"names":["resolvePath","messages","key","namespace","Error","process","env","NODE_ENV","undefined","message","split","forEach","part","next","prepareTranslationValues","values","Object","keys","length","transformedValues","index","value","transformed","chunks","result","isValidElement","cloneElement","getMessagesOrError","onError","defaultOnError","retrievedMessages","error","intlError","IntlError","IntlErrorCode","MISSING_MESSAGE","createBaseTranslator","cachedFormatsByLocale","defaultTranslationValues","globalFormats","formats","getMessageFallback","defaultGetMessageFallback","locale","messagesOrError","timeZone","getFallbackFromErrorAndNotify","code","translateBaseFn","cacheKey","filter","join","messageFormat","INSUFFICIENT_PATH","IntlMessageFormat","convertFormatsToIntlMessageFormat","INVALID_MESSAGE","formattedMessage","format","Array","isArray","String","FORMATTING_ERROR","translateFn","rich","raw"],"mappings":";;;;;;;AAoBA,SAASA,WAAT,CACEC,QADF,EAEEC,GAFF,EAGEC,SAHF,EAGoB;AAElB,EAAI,IAAA,CAACF,QAAL,EAAe;AACb,IAAA,MAAM,IAAIG,KAAJ,CACJC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAA,4BAAA,GACkCJ,SADlC,GAAA,IAAA,GAEIK,SAHA,CAAN,CAAA;AAKD,GAAA;;AAED,EAAIC,IAAAA,OAAO,GAAGR,QAAd,CAAA;AAEAC,EAAAA,GAAG,CAACQ,KAAJ,CAAU,GAAV,EAAeC,OAAf,CAAuB,UAACC,IAAD,EAAS;AAC9B,IAAA,IAAMC,IAAI,GAAIJ,OAAe,CAACG,IAAD,CAA7B,CAAA;;AAEA,IAAA,IAAIA,IAAI,IAAI,IAAR,IAAgBC,IAAI,IAAI,IAA5B,EAAkC;AAChC,MAAM,MAAA,IAAIT,KAAJ,CACJC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,2BAC2BL,GAD3B,GAAA,OAAA,IAEMC,SAAS,GAAQA,GAAAA,GAAAA,SAAR,SAAwB,UAFvC,CAAA,GAAA,GAAA,GAIIK,SALA,CAAN,CAAA;AAOD,KAAA;;AAEDC,IAAAA,OAAO,GAAGI,IAAV,CAAA;AACD,GAdD,CAAA,CAAA;AAgBA,EAAA,OAAOJ,OAAP,CAAA;AACD,CAAA;;AAED,SAASK,wBAAT,CAAkCC,MAAlC,EAA+D;AAC7D,EAAA,IAAIC,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAA,CAAoBG,MAApB,KAA+B,CAAnC,EAAsC,OAAOV,SAAP,CADuB;;AAI7D,EAAMW,IAAAA,iBAAiB,GAA0B,EAAjD,CAAA;AACAH,EAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBJ,OAApB,CAA4B,UAACT,GAAD,EAAQ;AAClC,IAAIkB,IAAAA,KAAK,GAAG,CAAZ,CAAA;AACA,IAAA,IAAMC,KAAK,GAAGN,MAAM,CAACb,GAAD,CAApB,CAAA;AAEA,IAAA,IAAIoB,WAAJ,CAAA;;AACA,IAAA,IAAI,OAAOD,KAAP,KAAiB,UAArB,EAAiC;AAC/BC,MAAAA,WAAW,GAAG,SAACC,WAAAA,CAAAA,MAAD,EAAsB;AAClC,QAAA,IAAMC,MAAM,GAAGH,KAAK,CAACE,MAAD,CAApB,CAAA;AAEA,QAAOE,OAAAA,cAAc,CAACD,MAAD,CAAd,GACHE,YAAY,CAACF,MAAD,EAAS;AAACtB,UAAAA,GAAG,EAAEA,GAAG,GAAGkB,KAAK,EAAA;AAAjB,SAAT,CADT,GAEHI,MAFJ,CAAA;AAGD,OAND,CAAA;AAOD,KARD,MAQO;AACLF,MAAAA,WAAW,GAAGD,KAAd,CAAA;AACD,KAAA;;AAEDF,IAAAA,iBAAiB,CAACjB,GAAD,CAAjB,GAAyBoB,WAAzB,CAAA;AACD,GAlBD,CAAA,CAAA;AAoBA,EAAA,OAAOH,iBAAP,CAAA;AACD,CAAA;;AAEK,SAAUQ,kBAAV,CAQL,IAAA,EAAA;AAAA,EAPC1B,IAAAA,QAOD,QAPCA,QAOD;AAAA,MANCE,SAMD,QANCA,SAMD;AAAA,MAAA,YAAA,GAAA,IAAA,CALCyB,OAKD;AAAA,MALCA,OAKD,6BALWC,cAKX,GAAA,YAAA,CAAA;;AACC,EAAI,IAAA;AACF,IAAI,IAAA,CAAC5B,QAAL,EAAe;AACb,MAAA,MAAM,IAAIG,KAAJ,CACJC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAEIC,8CAAAA,GAAAA,SAHA,CAAN,CAAA;AAKD,KAAA;;AAED,IAAMsB,IAAAA,iBAAiB,GAAG3B,SAAS,GAC/BH,WAAW,CAACC,QAAD,EAAWE,SAAX,CADoB,GAE/BF,QAFJ,CAAA;;AAIA,IAAI,IAAA,CAAC6B,iBAAL,EAAwB;AACtB,MAAA,MAAM,IAAI1B,KAAJ,CACJC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAA,6BAAA,GACmCJ,SADnC,GAAA,UAAA,GAEIK,SAHA,CAAN,CAAA;AAKD,KAAA;;AAED,IAAA,OAAOsB,iBAAP,CAAA;AACD,GAtBD,CAsBE,OAAOC,KAAP,EAAc;AACd,IAAA,IAAMC,SAAS,GAAG,IAAIC,SAAJ,CAChBC,aAAa,CAACC,eADE,EAEfJ,KAAe,CAACtB,OAFD,CAAlB,CAAA;AAIAmB,IAAAA,OAAO,CAACI,SAAD,CAAP,CAAA;AACA,IAAA,OAAOA,SAAP,CAAA;AACD,GAAA;AACF,CAAA;AAUa,SAAUI,oBAAV,CAawB,KAAA,EAAA;AAAA,EATpCC,IAAAA,qBASoC,SATpCA,qBASoC;AAAA,MARpCC,wBAQoC,SARpCA,wBAQoC;AAAA,MAP3BC,aAO2B,SAPpCC,OAOoC;AAAA,MAAA,qBAAA,GAAA,KAAA,CANpCC,kBAMoC;AAAA,MANpCA,kBAMoC,sCANfC,yBAMe,GAAA,qBAAA;AAAA,MALpCC,MAKoC,SALpCA,MAKoC;AAAA,MAJpCC,eAIoC,SAJpCA,eAIoC;AAAA,MAHpCzC,SAGoC,SAHpCA,SAGoC;AAAA,MAFpCyB,OAEoC,SAFpCA,OAEoC;AAAA,MADpCiB,QACoC,SADpCA,QACoC,CAAA;;AACpC,EAAA,SAASC,6BAAT,CACE5C,GADF,EAEE6C,IAFF,EAGEtC,OAHF,EAGkB;AAEhB,IAAMsB,IAAAA,KAAK,GAAG,IAAIE,SAAJ,CAAcc,IAAd,EAAoBtC,OAApB,CAAd,CAAA;AACAmB,IAAAA,OAAO,CAACG,KAAD,CAAP,CAAA;AACA,IAAA,OAAOU,kBAAkB,CAAC;AAACV,MAAAA,KAAK,EAALA,KAAD;AAAQ7B,MAAAA,GAAG,EAAHA,GAAR;AAAaC,MAAAA,SAAS,EAATA,SAAAA;AAAb,KAAD,CAAzB,CAAA;AACD,GAAA;;AAED,EAAA,SAAS6C,eAAT;AACE;AACA9C,EAAAA,GAFF;AAGE;AACAa,EAAAA,MAJF;AAKE;AACAyB,EAAAA,OANF,EAM4B;AAAA,IAAA,IAAA,qBAAA,CAAA;;AAE1B,IAAII,IAAAA,eAAe,YAAYX,SAA/B,EAA0C;AACxC;AACA,MAAA,OAAOQ,kBAAkB,CAAC;AACxBV,QAAAA,KAAK,EAAEa,eADiB;AAExB1C,QAAAA,GAAG,EAAHA,GAFwB;AAGxBC,QAAAA,SAAS,EAATA,SAAAA;AAHwB,OAAD,CAAzB,CAAA;AAKD,KAAA;;AACD,IAAMF,IAAAA,QAAQ,GAAG2C,eAAjB,CAAA;AAEA,IAAA,IAAInC,OAAJ,CAAA;;AACA,IAAI,IAAA;AACFA,MAAAA,OAAO,GAAGT,WAAW,CAACC,QAAD,EAAWC,GAAX,EAAgBC,SAAhB,CAArB,CAAA;AACD,KAFD,CAEE,OAAO4B,KAAP,EAAc;AACd,MAAOe,OAAAA,6BAA6B,CAClC5C,GADkC,EAElCgC,aAAa,CAACC,eAFoB,EAGjCJ,KAAe,CAACtB,OAHiB,CAApC,CAAA;AAKD,KAAA;;AAED,IAAA,IAAMwC,QAAQ,GAAG,CAAC9C,SAAD,EAAYD,GAAZ,EAAiBO,OAAjB,CACdyC,CAAAA,MADc,CACP,UAACtC,IAAD,EAAA;AAAA,MAAUA,OAAAA,IAAI,IAAI,IAAlB,CAAA;AAAA,KADO,CAEduC,CAAAA,IAFc,CAET,GAFS,CAAjB,CAAA;AAIA,IAAA,IAAIC,aAAJ,CAAA;;AACA,IAAIf,IAAAA,qBAAJ,IAAIA,IAAAA,IAAAA,CAAAA,qBAAAA,GAAAA,qBAAqB,CAAGM,MAAH,CAAzB,KAAI,IAAA,IAAA,qBAAA,CAAkCM,QAAlC,CAAJ,EAAiD;AAC/CG,MAAAA,aAAa,GAAGf,qBAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAqB,CAAGM,MAAH,CAArB,CAAgCM,QAAhC,CAAhB,CAAA;AACD,KAFD,MAEO;AACL,MAAA,IAAI,OAAOxC,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,QAAOqC,OAAAA,6BAA6B,CAClC5C,GADkC,EAElCgC,aAAa,CAACmB,iBAFoB,EAGlChD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACyCL,mCAAAA,GAAAA,GADzC,GAEMC,QAAAA,IAAAA,SAAS,GAAQA,GAAAA,GAAAA,SAAR,GAAwB,GAAA,GAAA,UAFvC,CAIIK,GAAAA,IAAAA,GAAAA,SAP8B,CAApC,CAAA;AASD,OAAA;;AAED,MAAI,IAAA;AACF4C,QAAAA,aAAa,GAAG,IAAIE,iBAAJ,CACd7C,OADc,EAEdkC,MAFc,EAGdY,iCAAiC,cAC3BhB,aAD2B,EACTC,OADS,CAE/BK,EAAAA,QAF+B,CAHnB,CAAhB,CAAA;AAQD,OATD,CASE,OAAOd,KAAP,EAAc;AACd,QAAOe,OAAAA,6BAA6B,CAClC5C,GADkC,EAElCgC,aAAa,CAACsB,eAFoB,EAGjCzB,KAAe,CAACtB,OAHiB,CAApC,CAAA;AAKD,OAAA;;AAED,MAAA,IAAI4B,qBAAJ,EAA2B;AACzB,QAAA,IAAI,CAACA,qBAAqB,CAACM,MAAD,CAA1B,EAAoC;AAClCN,UAAAA,qBAAqB,CAACM,MAAD,CAArB,GAAgC,EAAhC,CAAA;AACD,SAAA;;AACDN,QAAAA,qBAAqB,CAACM,MAAD,CAArB,CAA8BM,QAA9B,IAA0CG,aAA1C,CAAA;AACD,OAAA;AACF,KAAA;;AAED,IAAI,IAAA;AACF,MAAA,IAAMK,gBAAgB,GAAGL,aAAa,CAACM,MAAd;AAEvB;AACA;AACA;AACA5C,MAAAA,wBAAwB,CAAKwB,QAAAA,CAAAA,EAAAA,EAAAA,wBAAL,EAAkCvB,MAAlC,EALD,CAAzB,CAAA;;AAQA,MAAI0C,IAAAA,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,QAAM,MAAA,IAAIrD,KAAJ,CACJC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,0BAC0BL,GAD1B,GAAA,OAAA,IAEMC,SAAS,GAAkBA,aAAAA,GAAAA,SAAlB,SAAkC,UAFjD,CAAA,GAIIK,SALA,CAAN,CAAA;AAOD,OAjBC;;;AAoBF,MAAA,OAAOiB,cAAc,CAACgC,gBAAD,CAAd;AAELE,MAAAA,KAAK,CAACC,OAAN,CAAcH,gBAAd,CAFK,IAGL,OAAOA,gBAAP,KAA4B,QAHvB,GAIHA,gBAJG,GAKHI,MAAM,CAACJ,gBAAD,CALV,CAAA;AAMD,KA1BD,CA0BE,OAAO1B,KAAP,EAAc;AACd,MAAOe,OAAAA,6BAA6B,CAClC5C,GADkC,EAElCgC,aAAa,CAAC4B,gBAFoB,EAGjC/B,KAAe,CAACtB,OAHiB,CAApC,CAAA;AAKD,KAAA;AACF,GAAA;;AAED,EAAA,SAASsD,WAAT;AAME;AACA7D,EAAAA,GAPF;AAQE;AACAa,EAAAA,MATF;AAUE;AACAyB,EAAAA,OAXF,EAW4B;AAE1B,IAAMhB,IAAAA,MAAM,GAAGwB,eAAe,CAAC9C,GAAD,EAAMa,MAAN,EAAcyB,OAAd,CAA9B,CAAA;;AAEA,IAAA,IAAI,OAAOhB,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,MAAOsB,OAAAA,6BAA6B,CAClC5C,GADkC,EAElCgC,aAAa,CAACsB,eAFoB,EAGlCnD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACqBL,eAAAA,GAAAA,GADrB,GAEMC,OAAAA,IAAAA,SAAS,GAAkBA,aAAAA,GAAAA,SAAlB,GAAkC,GAAA,GAAA,UAFjD,CAIIK,GAAAA,qFAAAA,GAAAA,SAP8B,CAApC,CAAA;AASD,KAAA;;AAED,IAAA,OAAOgB,MAAP,CAAA;AACD,GAAA;;AAEDuC,EAAAA,WAAW,CAACC,IAAZ,GAAmBhB,eAAnB,CAAA;;AAEAe,EAAAA,WAAW,CAACE,GAAZ,GAAkB;AAChB;AACA/D,EAAAA,GAFgB,EAGT;AACP,IAAI0C,IAAAA,eAAe,YAAYX,SAA/B,EAA0C;AACxC;AACA,MAAA,OAAOQ,kBAAkB,CAAC;AACxBV,QAAAA,KAAK,EAAEa,eADiB;AAExB1C,QAAAA,GAAG,EAAHA,GAFwB;AAGxBC,QAAAA,SAAS,EAATA,SAAAA;AAHwB,OAAD,CAAzB,CAAA;AAKD,KAAA;;AACD,IAAMF,IAAAA,QAAQ,GAAG2C,eAAjB,CAAA;;AAEA,IAAI,IAAA;AACF,MAAA,OAAO5C,WAAW,CAACC,QAAD,EAAWC,GAAX,EAAgBC,SAAhB,CAAlB,CAAA;AACD,KAFD,CAEE,OAAO4B,KAAP,EAAc;AACd,MAAOe,OAAAA,6BAA6B,CAClC5C,GADkC,EAElCgC,aAAa,CAACC,eAFoB,EAGjCJ,KAAe,CAACtB,OAHiB,CAApC,CAAA;AAKD,KAAA;AACF,GAvBD,CAAA;;AAyBA,EAAA,OAAOsD,WAAP,CAAA;AACD;;;;"}