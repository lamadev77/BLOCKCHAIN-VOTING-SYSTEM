import React, { useState, useEffect, useRef } from 'react';
import Head from 'next/head';
import { GetServerSidePropsContext } from 'next';
import Navbar from '../../components/Navbar';
import { registerParty } from '../../utils/action';
import { SmartContract } from '../../constants';
import { toast } from 'react-toastify';
import { PulseLoader } from 'react-spinners';
import { getStorage } from '../../services';
import _ from 'lodash';
import { getFormattedErrorMessage, getPartyList } from '../../utils';
import { useTranslations } from 'next-intl';
import { useRouter } from 'next/router';

const defaultPartyDetails = { partyName: "", totalMembers: 0, agenda: "", partyLogo: "" }
declare const window: any;

const VoterRegistration = () => {
  const [partyDetails, setPartyDetails] = useState({ ...defaultPartyDetails });
  const [partyList, setPartyList] = useState([]);
  const [loading, setLoading] = useState(false);
  const [disabled, setDisabled] = useState(true);
  const loggedInAccountAddress = getStorage("loggedInAccountAddress");
  const isAdmin = getStorage("isAdmin");
  const fileRef = useRef(null);
  const router = useRouter();

  const voterT = useTranslations("voter_registration");
  const partyT = useTranslations("party");
  const candidateT = useTranslations("candidate_registration");
  let throttleState = false;

  useEffect(() => {
    if (/false|undefined|null/.test(isAdmin)) router.push("/");
    (async () => {
      const res = await getPartyList();
      setPartyList(res);
    })();
  }, [partyDetails]);

  const onChange = (name: string, value: string | number) => {
    if (throttleState) return;

    // validate number format
    if (name === "totalMembers" && value.toString().length > 1 && value.toString()[0] === "0") {
      throttleState = true;
      setTimeout(() => (throttleState = false), 2000)
      return toast.info("Number format error !");
    }

    (!partyDetails.partyName || !partyDetails.totalMembers
      || !partyDetails.agenda) ? setDisabled(true) : setDisabled(false);
    setPartyDetails({ ...partyDetails, [name]: value })
  }

  // upload partyDetails
  const onSubmit = async () => {
    if (!window?.ethereum) return toast.warn("Please install metamask wallet.");

    setLoading(true);
    try {
      // check if party already exists
      const isExits = _.includes(partyList, (party: any) => party.name === partyDetails.partyName);
      if (isExits) return toast.error("Party already exists on given name !");

      const formData = new FormData();
      const { partyName, totalMembers, agenda, partyLogo } = partyDetails;

      formData.append("partyName", partyName?.trim());
      formData.append("totalMembers", totalMembers?.toString());
      formData.append("agenda", agenda?.trim());
      formData.append("logo", partyLogo);

      const res1: any = await registerParty(formData);
      const { logo } = res1?.data?.data || {};

      if (!logo) throw new Error("Failed to upload logo !");

      await SmartContract.methods.addParty(
        partyName,
        totalMembers,
        agenda,
        logo
      ).send({ from: loggedInAccountAddress });

      toast.success("New Party Registered successfully.", { toastId: 2 });
      fileRef.current.value = "";
      setPartyDetails(defaultPartyDetails);
    } catch (error) {
      const erroMsg = getFormattedErrorMessage(error.message);
      console.error(erroMsg, error);
      toast.error(`Failed to register !, ${erroMsg}`, { toastId: 2 });
    }
    setLoading(false);
  }


  return (
    <div className='mb-[50px]'>
      <Head>
        <title>{partyT("party_registration")}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/logo.png" />
      </Head>
      <Navbar /><br />
      <div className='w-full flex justify-center'>
        <div className={`px-5 pt-4 pb-5 w-[550px] h-fit flex-col justify-between rounded-[2px] flex-wrap text-[15px] bg-slate-100 shadow-sm`}>
          <h4 className='mt-2 mb-4'>{voterT("form_title")}</h4>
          <div className='flex justify-between'>
            <div className='w-100 text-[15px]'>
              <span>{partyT("partyName")}</span>
              <input
                className='overrideInputStyle form-control px-3 py-[10px] rounded-1 mt-1'
                type="text"
                value={partyDetails.partyName}
                onChange={(e) => onChange("partyName", e.target.value)}
              />
            </div>
          </div>
          <div className='flex justify-between mt-4'>
            <div className='w-100 text-[15px]'>
              <span>{partyT("total_members")}</span>
              <input
                className='overrideInputStyle form-control px-3 py-[10px] rounded-1 mt-1'
                type="number"
                placeholder='0'
                value={partyDetails.totalMembers}
                onChange={(e) => onChange("totalMembers", e.target.value)}
              />
            </div>
          </div>
          <div className='flex justify-between mt-4'>
            <div className='w-100 text-[15px]'>
              <span>{partyT("party_agenda")}</span>
              <textarea
                className='overrideInputStyle form-control h-[150px] px-3 py-[10px] rounded-1 mt-1'
                placeholder='Brief description of party agenda'
                value={partyDetails.agenda}
                onChange={(e) => onChange("agenda", e.target.value)}
              ></textarea>
            </div>
          </div>
          <div className='flex justify-between mt-4'>
            <div className='w-100'>
              <span>{partyT("choose_party_logo")}</span>
              <input
                className='overrideInputStyle form-control py-[10px] rounded-1 mt-1'
                type="file"
                name="logo"
                ref={fileRef}
                onChange={(e: any) => onChange("partyLogo", e.target.files[0])}
              />
            </div>
          </div>
          <div className='flex justify-between mt-[30px] mb-1'>
            <button
              className={`btn bg-btnColor text-light py-2 w-100 fke rounded-[5px] hover:opacity-75 flex justify-center items-center ${(disabled || loading) && 'opacity-75 cursor-default'}`}
              onClick={onSubmit}
              disabled={disabled}
            >
              <span className='text-slate-100'>
                {loading ? candidateT("registering_label") : candidateT("register_btn")}
                {loading && <PulseLoader color='white' size={9} className='ml-4' />}
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default VoterRegistration;


// export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
//   try {
//     const { cookie } = ctx.req.headers
//     const isAdmin = getCookieValue(cookie, "isAdmin");
//     console.log({ isAdmin })

//     if (isAdmin?.toString() === "false" || !isAdmin) {
//       return {
//         redirect: {
//           parmanent: false,
//           destination: "/"
//         }
//       }
//     }

//   } catch (error) {
//     return { props: {} }
//   }
//   return { props: {} }
// }


